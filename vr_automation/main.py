"""
Script principal para execu√ß√£o da aplica√ß√£o VR/VA
"""

import sys
import os
import logging
from pathlib import Path

# Adicionar diret√≥rio raiz ao path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from config.settings import settings
from utils.excel_handler import ExcelHandler
from utils.business_rules import BusinessRules

# Configurar logging
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)


def main():
    """Fun√ß√£o principal"""
    
    try:
        logger.info("üöÄ Iniciando Sistema de Automa√ß√£o VR/VA")
        
        # Verificar se estamos no diret√≥rio correto
        if not os.path.exists("app.py"):
            logger.error("‚ùå Arquivo app.py n√£o encontrado. Execute este script do diret√≥rio raiz do projeto.")
            return 1
        
        # Verificar depend√™ncias
        check_dependencies()
        
        # Inicializar componentes
        initialize_components()
        
        # Executar aplica√ß√£o
        run_application()
        
        return 0
        
    except Exception as e:
        logger.error(f"‚ùå Erro na execu√ß√£o: {str(e)}")
        return 1


def check_dependencies():
    """Verificar depend√™ncias necess√°rias"""
    
    logger.info("üîç Verificando depend√™ncias...")
    
    required_packages = [
        'streamlit',
        'pandas',
        'openpyxl',
        'pydantic',
        'plotly'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
            logger.info(f"‚úÖ {package} - OK")
        except ImportError:
            missing_packages.append(package)
            logger.error(f"‚ùå {package} - N√£o encontrado")
    
    if missing_packages:
        logger.error(f"‚ùå Pacotes faltando: {', '.join(missing_packages)}")
        logger.info("üí° Execute: pip install -r requirements.txt")
        raise ImportError(f"Pacotes necess√°rios n√£o encontrados: {missing_packages}")
    
    logger.info("‚úÖ Todas as depend√™ncias est√£o instaladas")


def initialize_components():
    """Inicializar componentes do sistema"""
    
    logger.info("üîß Inicializando componentes...")
    
    try:
        # Criar diret√≥rios necess√°rios
        create_directories()
        
        # Testar handlers
        test_handlers()
        
        logger.info("‚úÖ Componentes inicializados com sucesso")
        
    except Exception as e:
        logger.error(f"‚ùå Erro na inicializa√ß√£o: {str(e)}")
        raise


def create_directories():
    """Criar diret√≥rios necess√°rios"""
    
    directories = [
        "data/temp",
        "data/cache",
        "logs"
    ]
    
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
        logger.info(f"üìÅ Diret√≥rio criado/verificado: {directory}")


def test_handlers():
    """Testar handlers principais"""
    
    try:
        # Testar ExcelHandler
        excel_handler = ExcelHandler()
        logger.info("‚úÖ ExcelHandler - OK")
        
        # Testar BusinessRules
        business_rules = BusinessRules()
        logger.info("‚úÖ BusinessRules - OK")
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao testar handlers: {str(e)}")
        raise


def run_application():
    """Executar aplica√ß√£o Streamlit"""
    
    logger.info("üåê Iniciando aplica√ß√£o Streamlit...")
    
    try:
        import subprocess
        import sys
        
        # Comando para executar Streamlit
        cmd = [sys.executable, "-m", "streamlit", "run", "app.py"]
        
        logger.info(f"üöÄ Executando: {' '.join(cmd)}")
        logger.info("üì± Aplica√ß√£o dispon√≠vel em: http://localhost:8501")
        logger.info("‚èπÔ∏è  Pressione Ctrl+C para parar")
        
        # Executar aplica√ß√£o
        subprocess.run(cmd)
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è  Aplica√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        logger.error(f"‚ùå Erro ao executar aplica√ß√£o: {str(e)}")
        raise


def show_help():
    """Mostrar ajuda"""
    
    help_text = """
ü§ñ Sistema de Automa√ß√£o VR/VA

Uso:
    python main.py          # Executar aplica√ß√£o
    python main.py --help   # Mostrar esta ajuda

Comandos dispon√≠veis:
    run                     # Executar aplica√ß√£o (padr√£o)
    test                    # Executar testes
    install                 # Instalar depend√™ncias
    setup                   # Configurar ambiente

Exemplos:
    python main.py run
    python main.py test
    python main.py install

Para mais informa√ß√µes, consulte o README.md
"""
    
    print(help_text)


def run_tests():
    """Executar testes"""
    
    logger.info("üß™ Executando testes...")
    
    try:
        import subprocess
        import sys
        
        cmd = [sys.executable, "-m", "pytest", "tests/", "-v"]
        subprocess.run(cmd)
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao executar testes: {str(e)}")
        return 1
    
    return 0


def install_dependencies():
    """Instalar depend√™ncias"""
    
    logger.info("üì¶ Instalando depend√™ncias...")
    
    try:
        import subprocess
        import sys
        
        cmd = [sys.executable, "-m", "pip", "install", "-r", "requirements.txt"]
        subprocess.run(cmd)
        
        logger.info("‚úÖ Depend√™ncias instaladas com sucesso")
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao instalar depend√™ncias: {str(e)}")
        return 1
    
    return 0


if __name__ == "__main__":
    # Verificar argumentos da linha de comando
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == "--help" or command == "-h":
            show_help()
        elif command == "test":
            sys.exit(run_tests())
        elif command == "install":
            sys.exit(install_dependencies())
        elif command == "run":
            sys.exit(main())
        else:
            print(f"‚ùå Comando desconhecido: {command}")
            show_help()
            sys.exit(1)
    else:
        # Executar aplica√ß√£o por padr√£o
        sys.exit(main())
